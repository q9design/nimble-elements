


*******************************************

              moved to nimble 2

*******************************************














# install from npm

	sudo npm i -g nimble-elements


# nimble developer install from local copy

	sudo npm i -g .  // from this folder


==============

next:

	- partioning
		- nimble-core
			- can be used with or without filesystem
			- generates a single index.html
		- nimble-cli
			- manages filesystem stuff and other build tools

	> next: learn grunt/etc for programic compelation control.
		also.. https://github.com/substack/node-browserify#api-example


	> next: start over using programantic compelation tool. 



	- option for two files (in part for search engine opts)

	- upg: shortcut for data urls in images? or hmm.. framwork better (don't want to dupliate binary data)


	- upgdate docs for new features
		--live
		- require('nimble')

	- update .. clean options

	- add more samples
	- copy descriptions when --bootstrap-list
	- menu and pages for basic-framework


	> upg: apply content even if no index.html / head tags.

	use api grunt?

	make compile options
		- source maps
		- minimize	
		- (two file / or one file target) .. or perhaps minimize good?
> nimble
	- bootstraps
		- manual .. creates a index.html manual of nimble.
		- cors/jsonp (where's a public service cors/jsonp)
		- basic-framework
			- add
				- header menu (3 pages) .. perhaps practical docs?
				- footer
				- live-data/forms/display examples
				- cors call
				
	---


> make so ok to have versions dynamic ? (not stuck on specific versions of libs)

upg: add bootstrap repos. .. so can be user supported.

	(upg: change --bootstrap to --init and/or alias them)

upg: could 'packetize' inline data then rebuild in memory (perhaps to blobs and inmemory dataurls?)

upg: nest sub elements within parents?

upg: properties.hjson -- see test/test
	- extends: 'input'  .. why created callback not seem work?

upg: use imports too?

upg: var nimble = require('nimble') ... nimble.require('nimble-package-name')

upg: register.js // specials (element, tagname)
	element = Object.create(HTMLElement.prototype)
	document.registerElement(tagname,{prototype:element})

upg: option to select source / dest paths.

upg: var nimble = require('nimble') .. template/nimble.js (automatically copied into build)
	nimble.params = (minimist object) .. so can get compile time paarams.

-----------------
webIDE
service worker

see: jackll? .. perhaps set our command line params more on par to match (to keep things simple on ppls memory)

